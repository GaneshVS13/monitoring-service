// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRestService is a mock of RestService interface.
type MockRestService struct {
	ctrl     *gomock.Controller
	recorder *MockRestServiceMockRecorder
}

// MockRestServiceMockRecorder is the mock recorder for MockRestService.
type MockRestServiceMockRecorder struct {
	mock *MockRestService
}

// NewMockRestService creates a new mock instance.
func NewMockRestService(ctrl *gomock.Controller) *MockRestService {
	mock := &MockRestService{ctrl: ctrl}
	mock.recorder = &MockRestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestService) EXPECT() *MockRestServiceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRestService) Do(ctx context.Context, method, url string, header map[string]string, payload interface{}) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, method, url, header, payload)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Do indicates an expected call of Do.
func (mr *MockRestServiceMockRecorder) Do(ctx, method, url, header, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRestService)(nil).Do), ctx, method, url, header, payload)
}
